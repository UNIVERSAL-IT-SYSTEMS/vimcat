#!/bin/bash

default_number_lines=0
default_colors="auto"
auto_colors="$(tput colors)"
default_foldmethod=""
default_foldlevel=""
default_foldminlines=""
default_tabstop=""
default_shiftwidth=""
default_softtabstop=""
default_foldmarker=""

print_usage() {
  cat <<EOF
Usage: $(basename "$0") [options] [--] [file] ...

Outputs syntax highlighted files.
Uses Vim for highlighting and elinks for rendering.

Files and options can be mixed.
If a filename can be mistaken for an option, use the \`-f' option, or place it
after \`--'.

Options:
  -h, --help
    Print this help message.
  --
    Separates arguments from filenames.
    Arguments seen after this marker are treated as files.
    This permits to process filenames that would otherwise been taken for
    arguments.
  -n, --line-number, --nl
    Activates line numbering.
  +n, --no-line-number, --no-nl
    Deactivates line numbering.
  -n{0,1}, --nl={0,1}, --line-number={0,1}
    Activates or deactivates line numbering.
    An empty value restores the default value, except for \`-n'.
  -c{value}, --colors={value}
    Sets the number of values available for highlighting.
    Value can be either auto, (empty), -1, 0, 1, 2, 8, 16, 88, 256 or true.
    -1 or '' (empty) restores default values.
    0, 1 and 2 only affect a bit Vim's output and it basically removes colors.
    auto uses \`tput colors\` to infer the right value.
    true uses 256 colors for Vim, and true color mode for elinks.
  +c, --no-colors
    Alias for \`--colors=0'.
  --vim-colors={value}
    Advanced. Sets Vim's \`t_Co' option.
    An empty value resets its default value.
    The possible values are: 0, 1, 2, 8, 16, 88 and 256.
    0 and 1 seem do be identical, they use underline and bold white.
    2 shows a very rare usage of blue (in error messages), and syntax highlight
    use bold gray too.
  --dump-colors={value}
    Advanced. Sets elinks's \`-dump-color-mode' option.
    An empty value makes the argument to be skipped.
    Here is the meaning of the possible values:
      -1  standard
       0  monochrome
       1  16 colors
       2  88 colors
       3  256 colors
       4  true colors
  --set-{option}={value}
  --set-no{option}
  --set-{option}!
  --set-{option}&, --unset-{option}
  --set-{option}+={value}
  --set-{option}^={value}
  --set-{option}-={value}
    Set Vim's given option to the given value.
    In fact, everything after \`--set-' is left intact and given to Vim.
    These options are backed by the \`--cmd' option.
  --cmd={command}
    Gives arbitrary commands to Vim.
  --cmd-reset
    Discard all previous commands.
    Also affects \`--set' options.
  --fdm={value}, --foldmethod={value}
    Set Vim's \`foldmethod' option.
    An empty value skips setting the option, "default" enforces the default.
  --fdl={value}, --foldlevel={value}
    Set Vim's \`foldlevel' option.
    0 will fold to the topmost level, 1 to the second level, etc.
    Use this option if you see no folds after using \`--foldmethod'.
    An empty value skips setting the option, "default" enforces the default.
  --fml={value}, --foldminlines={value}
    Set Vim's \`foldminlines' option.
    An empty value skips setting the option, "default" enforces the default.
  --ts={value}, --tabstop={value}
    Set Vim's \`tabstop' option.
    An empty value skips setting the option, "default" enforces the default.
    This helps with \`--foldmethod=indent'.
  --sw={value}, --shiftwidth={value}
    Set Vim's \`shiftwidth' option.
    An empty value skips setting the option, "default" enforces the default.
    This helps with \`--foldmethod=indent'.
  --sts={value}, --softtabstop={value}
    Set Vim's \`softtabstop' option.
    An empty value skips setting the option, "default" enforces the default.
    This helps with \`--foldmethod=indent'.
  --fmr={value}, --foldmarker={value}
    Set Vim's \`foldmarker' option.
    An empty value skips setting the option, "default" enforces the default.
    Use with \`--foldmethod=marker'

Default values: (default means reset to Vim's default)
  line numbering: "$default_number_lines"
  colors:         "$default_colors"
                  Note, "auto" would resolve to "$auto_colors".
  foldmethod:     "$default_foldmethod"
  foldlevel:      "$default_foldlevel"
  foldminlines:   "$default_foldminlines"
  tabstop:        "$default_tabstop"
  shiftwidth:     "$default_shiftwidth"
  softtabstop:    "$default_softtabstop"
  foldmarker:     "$default_foldmarker"

Advanced default values:
  vim colors:     "$default_vim_colors"
  dump colors:    "$default_dump_colors"

Remarks:
  Even if "auto" (or \`tput colors\`) resolve to 8, this does not necessarily
  imply that you cannot use more colors.
  For eg. using Konsole, tput reports 8 colors, which is the value Vim uses,
  however elinks will not output the colors you would see within Vim, you
  should then give a try to the option \`--dump-colors=3' alone (ie. without
  modifying \`--vim-colors').
EOF
}

init_tempfile() {
  # Do once
  # The HTML output is stored in a temporary file
  [ -z "$tmpfile" ] && tmpfile="$(mktemp)"
}

teardown() {
  if [ -n "$tmpfile" ]; then
    rm "$tmpfile"
    tmpfile=""
  fi
}

set_opt_number_lines() {
  case "$1" in
    1)
      nl=1
      ;;
    0)
      nl=0
      ;;
    *)
      nl=""
      ;;
  esac

  opt_number_lines=()
  if [ "$nl" == "" ]; then
    opt_number_lines=("-c" "let g:html_number_lines=0")
  else
    opt_number_lines=("-c" "let g:html_number_lines=$nl")
  fi
}
set_opt_number_lines "$default_number_lines"

set_opt_vim_colors() {
  opt_colors_vim=()
  if [ -z "$1" ]; then
    opt_colors_vim=("-c" "set t_Co&")
  else
    opt_colors_vim=("-c" "set t_Co=$1")
  fi
}

set_opt_dump_colors() {
  opt_colors_elinks=()
  [ -n "$1" ] && opt_colors_elinks=("-dump-color-mode" "$1")
}

set_opt_colors() {
  if [ "$1" == "auto" ]; then
    set_opt_colors "$auto_colors"
    return
  elif [ "$1" == "true" ]; then
    default_vim_colors=256
    default_dump_colors=4
  elif [ "$1" -le 0 ]; then
    default_vim_colors=0
    default_dump_colors=0
  elif [ "$1" -lt 8 ]; then
    default_vim_colors=2
    default_dump_colors=0
  elif [ "$1" -lt 16 ]; then
    default_vim_colors=8
    default_dump_colors=1
  elif [ "$1" -lt 88 ]; then
    default_vim_colors=16
    default_dump_colors=1
  elif [ "$1" -lt 256 ]; then
    default_vim_colors=88
    default_dump_colors=2
  elif [ "$1" -eq 256 ]; then
    default_vim_colors=256
    default_dump_colors=3
  elif [ "$1" -gt 256 ]; then
    default_vim_colors=256
    default_dump_colors=4
  else
    default_vim_colors=""
    default_dump_colors="2"
  fi

  set_opt_vim_colors "$default_vim_colors"
  set_opt_dump_colors "$default_dump_colors"
}
set_opt_colors "$default_colors"
# Note: The previous call sets the values for $default_vim_colors and
#       $default_dump_colors, which are later used by print_usage().

set_opt_cmd() {
  opt_cmd_internal="$opt_cmd_internal | $1"
}
set_opt_cmd_reset() {
  opt_cmd_internal=""
}
set_opt_cmd_reset
prepare_opt_cmd() {
  if [ "${#opt_cmd_internal[@]}" -eq 0 ]; then
    opt_cmd=()
  else
    opt_cmd=("-c" "${opt_cmd_internal# | }")
  fi
}

set_opt_folding() {
  local cmd=""

  if [ -n "$default_foldmethod" ]; then
    if [ "$default_foldmethod" == "default" ]; then
      cmd="$cmd foldmethod&"
    else
      cmd="$cmd foldmethod=$default_foldmethod"
    fi
  fi

  if [ -n "$default_foldlevel" ]; then
    if [ "$default_foldlevel" == "default" ]; then
      cmd="$cmd foldlevel&"
    else
      cmd="$cmd foldlevel=$default_foldlevel"
    fi
  fi

  if [ -n "$default_foldminlines" ]; then
    if [ "$default_foldminlines" == "default" ]; then
      cmd="$cmd foldminlines&"
    else
      cmd="$cmd foldminlines=$default_foldminlines"
    fi
  fi

  if [ -n "$default_tabstop" ]; then
    if [ "$default_tabstop" == "default" ]; then
      cmd="$cmd tabstop&"
    else
      cmd="$cmd tabstop=$default_tabstop"
    fi
  fi

  if [ -n "$default_shiftwidth" ]; then
    if [ "$default_shiftwidth" == "default" ]; then
      cmd="$cmd shiftwidth&"
    else
      cmd="$cmd shiftwidth=$default_shiftwidth"
    fi
  fi

  if [ -n "$default_softtabstop" ]; then
    if [ "$default_softtabstop" == "default" ]; then
      cmd="$cmd softtabstop&"
    else
      cmd="$cmd softtabstop=$default_softtabstop"
    fi
  fi

  if [ -n "$default_foldmarker" ]; then
    if [ "$default_foldmarker" == "default" ]; then
      cmd="$cmd foldmarker&"
    else
      cmd="$cmd foldmarker=$default_foldmarker"
    fi
  fi

  cmd="set$cmd"
  opt_folding=()
  [ -n "$cmd" ] && opt_folding=("-c" "$cmd")
}

set_opt_foldmethod() {
  default_foldmethod="$1"
  set_opt_folding
}
set_opt_foldmethod "$default_foldmethod"

set_opt_foldlevel() {
  default_foldlevel="$1"
  set_opt_folding
}
set_opt_foldlevel "$default_foldlevel"

set_opt_foldminlines() {
  default_foldminlines="$1"
  set_opt_folding
}
set_opt_foldminlines "$default_foldminlines"

set_opt_tabstop() {
  default_tabstop="$1"
  set_opt_folding
}
set_opt_tabstop "$default_tabstop"

set_opt_shiftwidth() {
  default_shiftwidth="$1"
  set_opt_folding
}
set_opt_shiftwidth "$default_shiftwidth"

set_opt_softtabstop() {
  default_softtabstop="$1"
  set_opt_folding
}
set_opt_softtabstop "$default_softtabstop"

set_opt_foldmarker() {
  default_foldmarker="$1"
  set_opt_folding
}
set_opt_foldmarker "$default_foldmarker"

process_file() {
  if ! [ -r "$1" ]; then
    echo "Cannot read file \"$1\"!" >&2
    return 1
  fi

  init_tempfile
  prepare_opt_cmd

  # Use vim-fu to colorize the file:
  # * -X: Do not connect to the X server.
  #       Speeds up launch, disables terminal tab name change.
  #       -> All good, we don't need that stuff!
  # * -S sourced-file:
  #       A script file to be sourced.
  #       This is different from -u vimrc, in that we do not replace the
  #       default vimrcs.
  #       Note: It is very important to keep this option *before* -E,
  #             as -s after it doesn't have the same meaning and doesn't take
  #             any argument!
  # * -E: Starts Vim in Ex mode. It will await command, but won't display the
  #       files on screen like the visual mode does.
  #       This permits to bypass the "Vim: Warning: Output is not to a
  #       terminal" message and its associated pause.
  # * -n: Do not use swapfiles.
  #       We won't modify the loaded file, so that doesn't hurt.
  #       Moreover, it won't display a message to the user in case we are
  #       processing a file already opened in another vim.
  #       A -R trick would display a "W10: Warning: Changing a readonly file"
  #       warning, and add a little 1s pause. Adding -c "set noreadonly", helps
  #       a bit in such case.
  #       The tempfile we are writing to doesn't care about recovery too, so
  #       we can disable swapfiles completely.
  # * -c cmd:
  #       Executes the command as if written by the user.
  #       Note: Vim permits only 10 of such arguments!
  # * --: Cleanly separate the arguments from the files to be processed.
  #       We can't make any assumption on the file names. They can even start
  #       with a dash, in which case they must not be mistaken for arguments.
  # * >/dev/null:
  #       Along with the Ex mode, this prevents the screen from being cleared
  #       and restored a short while after. None of Vim usage will be visible
  #       to the user, which is good.
  vim -X -S thisvimrc -E -n "${opt_number_lines[@]}" "${opt_colors_vim[@]}" "${opt_folding[@]}" "${opt_cmd[@]}" -c "TOhtml" -c "w! $tmpfile" -c "qa!" -- "$1" >/dev/null

  # Use elinks to render the colored HTML into the console
  # * -force-html: Interprets unrecognized files as HTML.
  #                Normally this is not required with -dump.
  # * -dump:
  #       Outputs the web page in the console, instead of using the interactive
  #       mode.
  # * -dump-color-mode -1-4:
  #       Use colors with the dump mode.
  #        -1  standard
  #         0  monochrome
  #         1  16 colors
  #         2  88 colors
  #         3  256 colors
  #         4  true colors
  # * -dump-width width:
  #       Console width.
  #       Alias for the document.dump.color_mode option.
  # * -eval 'set option = value':
  #       Sets any option.
  #       document.browse.margin_width has no parameter alias.
  #       This option is used to suppress the left margin, which is not as
  #       useful in a dump as in an interactive mode.
  # * -no-numbering 0|1:
  #       Suppresses the numbering before each link.
  #       Note that each URL is transformed into a link by the :TOhtml command.
  #       Alias for document.dump.numbering.
  # * -no-references 0|1:
  #       Suppresses the foot reference for each link.
  #       This is the only way to get the link URL, as only the link text is
  #       displayed. But we don't care as only URLs are linkified.
  #       Alias for document.dump.references.
  # Use sed to suppress the useless line ending spaces, this can speedup
  # display a bit.
  elinks -force-html -dump "${opt_colors_elinks[@]}" -dump-width "$(tput cols)" -eval 'set document.browse.margin_width = 0' -no-numbering 1 -no-references 1 "$tmpfile" | sed -r -e 's/\s+$//'
}

#
# Entry point
#

# Process each file from the command line
while [ "$#" -gt 0 ]; do
  if [ "$no_more_args" == "1" ]; then
    process_file "$1"
  else
    case "$1" in
      -h|--help)
        print_usage
        exit 0
        ;;
      --)
        no_more_args=1
        ;;
      -n|--line-number|--nl)
        set_opt_number_lines 1
        ;;
      +n|--no-line-number|--no-nl)
        set_opt_number_lines 0
        ;;
      -n*)
        set_opt_number_lines "${1#-n}"
        ;;
      --nl=*|--line-number=*)
        set_opt_number_lines "${1#*=}"
        ;;
      -c)
        set_opt_colors "$auto_colors"
        ;;
      -c*)
        set_opt_colors "${1#-c}"
        ;;
      --colors=*)
        set_opt_colors "${1#*=}"
        ;;
      +c|--no-colors)
        set_opt_colors 0
        ;;
      --vim-colors=*)
        set_opt_vim_colors "${1#*=}"
        ;;
      --dump-colors=*)
        set_opt_dump_colors "${1#*=}"
        ;;
      --set-*)
        set_opt_cmd "set ${1#--set-}"
        ;;
      --cmd=*)
        set_opt_cmd "${1#*=}"
        ;;
      --cmd-reset)
        set_opt_cmd_reset
        ;;
      --fdm=*|--foldmethod=*)
        set_opt_foldmethod "${1#*=}"
        ;;
      --fdl=*|--foldlevel=*)
        set_opt_foldlevel "${1#*=}"
        ;;
      --fml=*|--foldminlines=*)
        set_opt_foldminlines "${1#*=}"
        ;;
      --ts=*|--tabstop=*)
        set_opt_tabstop "${1#*=}"
        ;;
      --sw=*|--shiftwidth=*)
        set_opt_shiftwidth "${1#*=}"
        ;;
      --sts=*|--softtabstop=*)
        set_opt_softtabstop "${1#*=}"
        ;;
      --fmr=*|--foldmarker=*)
        set_opt_foldmarker "${1#*=}"
        ;;
      *)
        process_file "$1"
    esac
  fi

  shift
done

teardown
