#!/bin/bash

#
# Default values
#

default_number_lines=""
default_colors=""
auto_colors="$(tput colors)"
default_foldmethod=""
default_foldlevel=""
default_foldminlines=""
default_tabstop=""
default_shiftwidth=""
default_softtabstop=""
default_foldmarker=""



#
# Load configuration files
#

if [ -r /etc/vimcat.conf ]; then
  . /etc/vimcat.conf
fi
if [ -d /etc/vimcat.conf.d/ ]; then
  OLDIFS="$IFS"
  IFS=
  for f in `find /etc/vimcat.conf.d/ -type f | sort`; do
    . "$f"
  done
  IFS="$OLDIFS"
fi
if [ -r ~/.vimcatrc ]; then
  . ~/.vimcatrc
fi
if [ -r ./.vimcatrc ]; then
  . ./.vimcatrc
fi



#
# Script functions
#

print_usage() {
  cat <<EOF
Usage: $(basename "$0") [options] [--] [file] ...

Outputs syntax highlighted files.
Uses Vim for highlighting and elinks for rendering.

Files and options can be mixed.
If a filename can be mistaken for an option, use the \`-f' option, or place it
after \`--'.

Options:
  -h, --help
    Print this help message.
  --
    Separates arguments from filenames.
    Arguments seen after this marker are treated as files.
    This permits to process filenames that would otherwise been taken for
    arguments.
  -f={filename}
    Process the given file. This permits to continue interleaving options for
    following files, as opposed to using \`--'.
  -n, --line-number, --nl
    Activates line numbering.
  +n, --no-line-number, --no-nl
    Deactivates line numbering.
  -n{0,1}, --nl={0,1}, --line-number={0,1}
    Activates or deactivates line numbering.
    An empty value restores the default value, except for \`-n'.
  -c{value}, --colors={value}
    Sets Vim's \`t_Co' option, the number of values available for highlighting.
    Value can be either auto, (empty), reset, default, 0, 1, 2, 8, 16, 88, 256 or true.
    An empty value merely skip setting the option.
    reset enforces Vim's default value.
    0 and 1 seem do be identical, they use underline and bold white.
    2 shows a very rare usage of blue (in error messages), and syntax highlight
    use bold gray too.
    auto uses \`tput colors\` to infer the right value.
    true uses the 24 bits color codes available in certain terminals.
  +c, --no-colors
    Alias for \`--colors=0'.
  --set-{option}={value}
  --set-no{option}
  --set-{option}!
  --set-{option}&, --unset-{option}
  --set-{option}+={value}
  --set-{option}^={value}
  --set-{option}-={value}
    Set Vim's given option to the given value.
    In fact, everything after \`--set-' is left intact and given to Vim.
    These options are backed by the \`--cmd' option.
  --cmd={command}
    Gives arbitrary commands to Vim.
  --cmd-reset
    Discard all previous commands.
    Also affects \`--set' options.
  --fdm={value}, --foldmethod={value}
    Set Vim's \`foldmethod' option.
    An empty value skips setting the option, "reset" enforces Vim's default value.
  --fdl={value}, --foldlevel={value}
    Set Vim's \`foldlevel' option.
    0 will fold to the topmost level, 1 to the second level, etc.
    Use this option if you see no folds after using \`--foldmethod'.
    An empty value skips setting the option, "reset" enforces Vim's default value.
  --fml={value}, --foldminlines={value}
    Set Vim's \`foldminlines' option.
    An empty value skips setting the option, "reset" enforces Vim's default value.
  --ts={value}, --tabstop={value}
    Set Vim's \`tabstop' option.
    An empty value skips setting the option, "reset" enforces Vim's default value.
    This helps with \`--foldmethod=indent'.
  --sw={value}, --shiftwidth={value}
    Set Vim's \`shiftwidth' option.
    An empty value skips setting the option, "reset" enforces Vim's default value.
    This helps with \`--foldmethod=indent'.
  --sts={value}, --softtabstop={value}
    Set Vim's \`softtabstop' option.
    An empty value skips setting the option, "reset" enforces Vim's default value.
    This helps with \`--foldmethod=indent'.
  --fmr={value}, --foldmarker={value}
    Set Vim's \`foldmarker' option.
    An empty value skips setting the option, "reset" enforces Vim's default value.
    Use with \`--foldmethod=marker'

In the above, "reset" means reset to Vim's default value, whereas "default" refers to the following.
Default values:
  line numbering: "$default_number_lines"
  colors:         "$default_colors"
                  Note, "auto" would resolve to "$auto_colors".
  foldmethod:     "$default_foldmethod"
  foldlevel:      "$default_foldlevel"
  foldminlines:   "$default_foldminlines"
  tabstop:        "$default_tabstop"
  shiftwidth:     "$default_shiftwidth"
  softtabstop:    "$default_softtabstop"
  foldmarker:     "$default_foldmarker"

Remarks:
  Even if "auto" (or \`tput colors\`) resolve to 8, this does not necessarily
  imply that you cannot use more colors.
  For eg. using Konsole, tput reports 8 colors, which is the value Vim uses,
  but can handle 24 bits colors.

You can modify the default values through use of configuration files.
The files, if they exist, are read in the following order:
  /etc/vimcat.conf
  /etc/vimcat.conf.d/*
  ~/.vimcatrc
  ./.vimcatrc
EOF
}

init_tempfile() {
  # Do once
  # The ansi color coded output is stored in a temporary file
  [ -z "$tmpfile" ] && tmpfile="$(mktemp)"
}

teardown() {
  if [ -n "$tmpfile" ]; then
    rm "$tmpfile"
    tmpfile=""
  fi
}

set_opt_number_lines() {
  opt_number_lines=()
  case "$1" in
    reset)
      opt_number_lines=("-c" "let g:ansicolorcodes_number_lines&")
      ;;
    default)
      opt_number_lines=("-c" "let g:ansicolorcodes_number_lines=$default_number_lines")
      ;;
    0|1)
      opt_number_lines=("-c" "let g:ansicolorcodes_number_lines=$1")
      ;;
  esac
}
set_opt_number_lines "$default_number_lines"

set_opt_colors() {
  opt_colors=()
  case "$1" in
    '')
      ;;
    auto)
      set_opt_colors "$auto_colors"
      ;;
    default)
      if [ "$default_colors" == "default" ]; then
        # Default shouldn't reference itself, use "reset" instead, as foolkeeper
        # Besides, "default" and "reset" can sometime be taken for one another.
        set_opt_colors "reset"
      else
        set_opt_colors "$default_colors"
      fi
      ;;
    reset)
      opt_colors=("-c" "set t_Co&")
      ;;
    true)
      opt_colors=("-c" "set t_Co=256")
      ;;
    *)
      if [ "$1" -le 0 ]; then
        opt_colors=("-c" "set t_Co=0")
      elif [ "$1" -eq 1 ]; then
        opt_colors=("-c" "set t_Co=1")
      elif [ "$1" -lt 8 ]; then
        opt_colors=("-c" "set t_Co=2")
      elif [ "$1" -lt 16 ]; then
        opt_colors=("-c" "set t_Co=8")
      elif [ "$1" -lt 88 ]; then
        opt_colors=("-c" "set t_Co=16")
      elif [ "$1" -lt 256 ]; then
        opt_colors=("-c" "set t_Co=88")
      elif [ "$1" -eq 256 ]; then
        opt_colors=("-c" "set t_Co=256")
      elif [ "$1" -gt 256 ]; then
        opt_colors=("-c" "set t_Co=256")
      else
        set_opt_colors "$auto_colors"
      fi
      ;;
  esac
}
set_opt_colors "$default_colors"

set_opt_cmd() {
  opt_cmd_internal="$opt_cmd_internal | $1"
}
set_opt_cmd_reset() {
  opt_cmd_internal=""
}
set_opt_cmd_reset
prepare_opt_cmd() {
  if [ "${#opt_cmd_internal}" -eq 0 ]; then
    opt_cmd=()
  else
    opt_cmd=("-c" "${opt_cmd_internal# | }")
  fi
}

set_opt_folding() {
  local cmd=""

  for var in foldmethod foldlevel foldminlines tabstop shiftwidth softtabstop foldmarker; do
    local opt_opt="opt_$var"
    local default_opt="default_$var"
    if [ -n "${!opt_opt}" ]; then
      if [ "${!opt_opt}" == "reset" ]; then
        cmd="$cmd $var&"
      elif [ "${!opt_opt}" == "default" ]; then
        if [ "${!default_opt}" == "default" ]; then
          # Default value being "default" is a mistake for "reset"
          cmd="$cmd $var&"
        else
          cmd="$cmd $var=${!default_opt}"
        fi
      else
        cmd="$cmd $var=${!opt_opt}"
      fi
    fi
  done

  opt_folding=()
  [ -n "$cmd" ] && opt_folding=("-c" "set$cmd")
}

for var in foldmethod foldlevel foldminlines tabstop shiftwidth softtabstop foldmarker; do
  eval "
set_opt_$var() {
  opt_$var=\"\$1\"
  set_opt_folding
}
set_opt_$var \"\$default_$var\"
"
done

process_file() {
  if [ "$1" == "-" ]; then
    init_tempfile
    cat - > "$tmpfile"
    process_file "$tmpfile"
    return "$?"
  fi

  if ! [ -r "$1" ]; then
    echo "Cannot read file \"$1\"!" >&2
    return 1
  fi

  init_tempfile
  prepare_opt_cmd

  # Use vim-fu to colorize the file:
  # * -X: Do not connect to the X server.
  #       Speeds up launch, disables terminal tab name change.
  #       -> All good, we don't need that stuff!
  # * -S sourced-file:
  #       A script file to be sourced.
  #       This is different from -u vimrc, in that we do not replace the
  #       default vimrcs.
  #       Note: It is very important to keep this option *before* -E,
  #             as -s after it doesn't have the same meaning and doesn't take
  #             any argument!
  # * -E: Starts Vim in Ex mode. It will await command, but won't display the
  #       files on screen like the visual mode does.
  #       This permits to bypass the "Vim: Warning: Output is not to a
  #       terminal" message and its associated pause.
  # * -n: Do not use swapfiles.
  #       We won't modify the loaded file, so that doesn't hurt.
  #       Moreover, it won't display a message to the user in case we are
  #       processing a file already opened in another vim.
  #       A -R trick would display a "W10: Warning: Changing a readonly file"
  #       warning, and add a little 1s pause. Adding -c "set noreadonly", helps
  #       a bit in such case.
  #       The tempfile we are writing to doesn't care about recovery too, so
  #       we can disable swapfiles completely.
  # * -c cmd:
  #       Executes the command as if written by the user.
  #       Note: Vim permits only 10 of such arguments!
  # * --: Cleanly separate the arguments from the files to be processed.
  #       We can't make any assumption on the file names. They can even start
  #       with a dash, in which case they must not be mistaken for arguments.
  # * >/dev/null:
  #       Along with the Ex mode, this prevents the screen from being cleared
  #       and restored a short while after. None of Vim usage will be visible
  #       to the user, which is good.
  vim -X -S /usr/share/vimcat/thisvimrc -E -n "${opt_number_lines[@]}" "${opt_colors[@]}" "${opt_folding[@]}" "${opt_cmd[@]}" -c "TOansicolorcodes" -c "w! $tmpfile" -c "qa!" -- "$1" >/dev/null

  cat "$tmpfile"
}

#
# Entry point
#

# Process each file from the command line
processed_files=0
while [ "$#" -gt 0 ]; do
  if [ "$no_more_args" == "1" ]; then
    processed_files=1
    process_file "$1"
  else
    case "$1" in
      -h|--help)
        print_usage
        exit 0
        ;;
      --)
        no_more_args=1
        ;;
      -n|--line-number|--nl)
        set_opt_number_lines 1
        ;;
      +n|--no-line-number|--no-nl)
        set_opt_number_lines 0
        ;;
      -n*)
        set_opt_number_lines "${1#-n}"
        ;;
      --nl=*|--line-number=*)
        set_opt_number_lines "${1#*=}"
        ;;
      -c)
        set_opt_colors "$auto_colors"
        ;;
      -c*)
        set_opt_colors "${1#-c}"
        ;;
      --colors=*)
        set_opt_colors "${1#*=}"
        ;;
      +c|--no-colors)
        set_opt_colors 0
        ;;
      --set-*)
        set_opt_cmd "set ${1#--set-}"
        ;;
      --cmd=*)
        set_opt_cmd "${1#*=}"
        ;;
      --cmd-reset)
        set_opt_cmd_reset
        ;;
      --fdm=*|--foldmethod=*)
        set_opt_foldmethod "${1#*=}"
        ;;
      --fdl=*|--foldlevel=*)
        set_opt_foldlevel "${1#*=}"
        ;;
      --fml=*|--foldminlines=*)
        set_opt_foldminlines "${1#*=}"
        ;;
      --ts=*|--tabstop=*)
        set_opt_tabstop "${1#*=}"
        ;;
      --sw=*|--shiftwidth=*)
        set_opt_shiftwidth "${1#*=}"
        ;;
      --sts=*|--softtabstop=*)
        set_opt_softtabstop "${1#*=}"
        ;;
      --fmr=*|--foldmarker=*)
        set_opt_foldmarker "${1#*=}"
        ;;
      -f=*)
        processed_files=1
        process_file "${1#*=}"
	;;
      *)
        processed_files=1
        process_file "$1"
    esac
  fi

  shift
done

if [ "$processed_files" -eq 0 ]; then
  process_file -
fi

teardown
